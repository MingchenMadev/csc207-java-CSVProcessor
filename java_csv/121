import java.util.*;
import java.util.HashMap;
import java.io.File;
import java.io.FileNotFoundException;

public class CSVProcessor {
    /*
    *Repeatedly prompt user for command.
    */
    private HashMap<String, Table> Assignment;
    
    public void assignvariable(String name, Table out_table){
        Assignment.put(name, out_table);
    }
    public void expression_eva(String input_str){
        Table temp_tab;
        String[] string_comm = input_str.split(" = ");
        String name = string_comm[0];
        String string_comm_right = string_comm[1];
        String[] expression = string_comm_right.split("[()]");
        if(expression[0].equals("Load")){
            try{
                FileReader file = new FileReader(expression[1]);
                temp_tab = new Table(file.getString());
            } catch(FileNotFoundException e){
                return;
            }
        } else if (expression[0].equals("Column")){
            temp_tab = Column_evaluate(expression[1]);
        } else if (expression[0].equals("Join")){
            temp_tab = Join_evaluate(expression[1]);
        } else if (expression[0].equals("Product")){
            temp_tab = Join_evaluate(expression[1]);
        } else if (expression[0].equals("Order_by")){
            temp_tab = Order_by_evaluate(expression[1]);
        } else if (expression[0].equals("Rows")){
            temp_tab = Rows_evaluate(expression[1]);
        } else if (expression[0].equals("NaturalJoin")){
            temp_tab = NaturalJoin_evaluate(expression[1]);
        } else {
            System.out.println("Failure in recognizing expression!");
        }
            
        assignvariable(name, temp_tab);
    }
    
    
    
    public Table Column_evaluate(String exp){
        Table output_tab;
        String[] info = exp.split(",");
        Table input_tab = Assignment.get(info[0]);
        int[] columns = new int[info.length - 1];
        for (int i = 0; i < (info.length - 1); i++ ){
            columns[i] = new Integer(info[i + 1]); 
        }
        output_tab = input_tab.columns(columns);
        return output_tab;
    }
    public Table Join_evaluate(String exp){
        Table output_tab;
        String[] info = exp.split(",");
        Table join_table_a = Assignment.get(info[0]);
        Table join_table_b = Assignment.get(info[1]);
        int tab_a = new Integer(info[2]);
        int tab_b = new Integer(info[3]);
        output_tab = join_table_a.join(join_table_b, tab_a, tab_b);
        return output_tab;
    }
    public Table Product_evaluate(String exp){
        Table output_tab;
        String[] info = exp.split(",");
        Table join_table_a = Assignment.get(info[0]);
        Table join_table_b = Assignment.get(info[1]);
        output_tab = join_table_a.product(join_table_b);
        return output_tab;
    }
    public Table NaturalJoin_evaluate(String exp){
        Table output_tab;
        String[] info = exp.split(",");
        Table join_table_a = Assignment.get(info[0]);
        Table join_table_b = Assignment.get(info[1]);
        output_tab = join_table_a.NaturalJoin(join_table_b);
        return output_tab;
    }
    public Table Rows_evaluate(String exp){
        Table output_tab;
        String[] info = exp.split(",");
        Table input_tab = Assignment.get(info[0]);
        int p = new Integer(info[1]);
        int q = new Integer(info[3]);
        output_tab = input_tab.Rows(p, q, info[2]);
        return output_tab;
    }
    public Table Order_by_evaluate(String exp){
        Table output_tab;
        String[] info = exp.split(",");
        Table input_tab = Assignment.get(info[0]);
        int order_col = new Integer(info[1]);
        output_tab = input_tab.OrderBy(order_col);
        return output_tab;
    }
    
    
    
    public static void main(String args[]) {
        String command;
        String commandList[] = {"PRINT", "SAVE"}; 
        // All caps to make commands case-insensitive.
        List<String> list = Arrays.asList(commandList);
        //Assignment using a HashMap   HashMap<String, Table> assignment = \
        //new HashMap<String, Table>();
        String parseCommand = "";
                
        //Begin Prompt
        while( !parseCommand.equalsIgnoreCase("exit")){
            Scanner input = new Scanner(System.in);
            System.out.println("Enter a Command: ");
            command= input.nextLine().trim();
            parseCommand = command.split(" ")[0];  // Parse String
            System.out.println(parseCommand);
            
            
            if(list.contains(parseCommand.toUpperCase())) {
                System.out.println("You have selected: " + parseCommand);
                System.out.println(parseCommand + " has executed"); // execute command here
            }
            else if (command.contains("=")){
                 System.out.println("You have selected: Assignment" );
                 System.out.println("Assignment has executed");
            }
            else if(! parseCommand.equalsIgnoreCase("exit")){
                    System.out.println("You have selected: " + parseCommand);
                    System.out.println("Invalid Command"); // error msg
            }
            
            }
        
            System.out.println("Program Exited"); // Terminate program.

        }
    
    public Table load(String filename){
        return new Table(filename);
    }
    
}
        

        
